import Sard.ToSubset
import Mathlib.Analysis.Calculus.ContDiff
import Mathlib.Topology.MetricSpace.Lipschitz
import Mathlib.Topology.Basic

/-!
## Locally Lipschitz functions
Define locally Lipschitz functions and show their elementary properties.
Show that C¬π functions are locally Lipschitz.
-/
-- FIXME: move to a separate section of Lipschitz

open NNReal Set Topology
set_option autoImplicit false

variable {X Y Z: Type*}

section EMetric
variable [EMetricSpace X] [EMetricSpace Y] [EMetricSpace Z]

/-- `f : X ‚Üí Y` is **locally Lipschitz** iff every point `p ‚àà X` has a neighourhood
on which `f` is Lipschitz. -/
def LocallyLipschitz (f : X ‚Üí Y) : Prop := ‚àÄ x : X, ‚àÉ K, ‚àÉ t ‚àà ùìù x, LipschitzOnWith K f t

namespace LocallyLipschitz

/-- A Lipschitz function is locally Lipschitz. -/
protected lemma of_Lipschitz {f : X ‚Üí Y} {K : ‚Ñù‚â•0} (hf : LipschitzWith K f) : LocallyLipschitz f := by
  intro x
  use K, univ
  rw [lipschitzOn_univ]
  exact ‚ü®Filter.univ_mem, hf‚ü©

/-- The identity function is locally Lipschitz. -/
protected lemma id : LocallyLipschitz (@id X) := LocallyLipschitz.of_Lipschitz (LipschitzWith.id)

/-- Constant functions are locally Lipschitz. -/
protected lemma const (b : Y) : LocallyLipschitz (fun _ : X ‚Ü¶ b) :=
  LocallyLipschitz.of_Lipschitz (LipschitzWith.const b)

-- tweaked version of the result in mathlib, weaker hypotheses -- not just restricting the domain,
-- but also weakening the assumption on the codomain
theorem comp_lipschitzOnWith' {Kf Kg : ‚Ñù‚â•0} {f : Y ‚Üí Z} {g : X ‚Üí Y} {s : Set X}
    (hf : LipschitzOnWith Kf f (g '' s)) (hg : LipschitzOnWith Kg g s) :
    LipschitzOnWith (Kf * Kg) (f ‚àò g) s := by
  intro x hx y hy
  calc edist ((f ‚àò g) x) ((f ‚àò g) y)
    _ ‚â§ Kf * edist (g x) (g y) := hf (mem_image_of_mem g hx) (mem_image_of_mem g hy)
    _ ‚â§ Kf * (Kg * edist x y) := by exact mul_le_mul_left' (hg hx hy) Kf
    _ = ‚Üë(Kf * Kg) * edist x y := by rw [‚Üê mul_assoc, ENNReal.coe_mul]

/-- The composition of locally Lipschitz functions is locally Lipschitz. --/
protected lemma comp  {f : Y ‚Üí Z} {g : X ‚Üí Y}
    (hf : LocallyLipschitz f) (hg : LocallyLipschitz g) : LocallyLipschitz (f ‚àò g) := by
  intro x
  -- g is Lipschitz on t ‚àã x, f is Lipschitz on u ‚àã g(x)
  rcases hg x with ‚ü®Kg, t, ht, hgL‚ü©
  rcases hf (g x) with ‚ü®Kf, u, hu, hfL‚ü©
  -- idea: shrink u to g(t), then apply `comp_lipschitzOnWith'`
  -- more precisely: restrict g to t' := t ‚à© g‚Åª¬π(u); the preimage of u under g':=g‚à£t.
  let g' := t.restrict g
  let t' : Set X := ‚Üë(g' ‚Åª¬π' u)
  -- The following is mathematically obvious; sorries are merely wrestling with coercions.
  have h‚ÇÅ : t' = t ‚à© g ‚Åª¬π' u := by
    apply Iff.mpr (Subset.antisymm_iff)
    constructor
    ¬∑ intro x hx
      -- have : x ‚àà t := coe_subset hx
      constructor
      ¬∑ exact coe_subset hx
      ¬∑ -- have x ‚àà t', so can apply g' (and land in u by definition), so g'(x)=g(x) ‚àà u
        sorry
    ¬∑ intro x hx
      rcases hx with ‚ü®ht, hgu‚ü©
      -- as x ‚àà t, we can write g(x)=g'(x); the rhs lies in u, so x ‚àà g‚Åª¬π(u) also
      sorry
  have h‚ÇÇ : t' ‚àà ùìù x := by -- FIXME: the following is a tour de force; there must be a nicer proof
    -- by ht, t contains an open subset U
    rcases (Iff.mp (mem_nhds_iff) ht) with ‚ü®U, hUt, hUopen, hxU‚ü©
    -- similarly, u contains an open subset V
    rcases (Iff.mp (mem_nhds_iff) hu) with ‚ü®V, hVt, hVopen, hgxV‚ü©
    -- by continuity, g‚Åª¬π(u) contains the open subset g‚Åª¬π(V)
    have : ContinuousOn g U := LipschitzOnWith.continuousOn (LipschitzOnWith.mono hgL hUt)
    have h : IsOpen (U ‚à© (g ‚Åª¬π' V)) := ContinuousOn.preimage_open_of_open this hUopen hVopen
    have : U ‚à© (g ‚Åª¬π' V) ‚äÜ t' := by rw [h‚ÇÅ]; apply inter_subset_inter hUt (preimage_mono hVt)
    -- now, U ‚à© g‚Åª¬π(V) is an open subset contained in t'
    rw [mem_nhds_iff]
    use U ‚à© (g ‚Åª¬π' V)
    exact ‚ü®this, ‚ü®h, ‚ü®hxU, hgxV‚ü©‚ü©‚ü©
  have : g '' t' ‚äÜ u := by calc g '' t'
    _ = g '' (t ‚à© g ‚Åª¬π' u) := by rw [h‚ÇÅ]
    _ ‚äÜ g '' t ‚à© g '' (g ‚Åª¬π' u) := by apply image_inter_subset
    _ ‚äÜ g '' t ‚à© u := by gcongr; apply image_preimage_subset
    _ ‚äÜ u := by apply inter_subset_right
  use Kf * Kg, t'
  exact ‚ü®h‚ÇÇ, comp_lipschitzOnWith'
    (LipschitzOnWith.mono hfL this) (LipschitzOnWith.mono hgL coe_subset)‚ü©

/-- If `f` and `g` are locally Lipschitz, so is the induced map `f √ó g` to the product type. -/
protected lemma prod {f : X ‚Üí Y} (hf : LocallyLipschitz f) {g : X ‚Üí Z} (hg : LocallyLipschitz g) :
    LocallyLipschitz fun x => (f x, g x) := by
  intro x
  rcases hf x with ‚ü®Kf, t‚ÇÅ, h‚ÇÅt, hfL‚ü©
  rcases hg x with ‚ü®Kg, t‚ÇÇ, h‚ÇÇt, hgL‚ü©
  use max Kf Kg, t‚ÇÅ ‚à© t‚ÇÇ
  constructor
  ¬∑ exact Filter.inter_mem h‚ÇÅt h‚ÇÇt
  ¬∑ intro y hy z hz
    have h‚ÇÅ : edist (f y) (f z) ‚â§ Kf * edist y z := by
      exact LipschitzOnWith.mono hfL (inter_subset_left t‚ÇÅ t‚ÇÇ) hy hz
    have h‚ÇÇ : edist (g y) (g z) ‚â§ Kg * edist y z := by
      exact LipschitzOnWith.mono hgL (inter_subset_right t‚ÇÅ t‚ÇÇ) hy hz
    rw [ENNReal.coe_mono.map_max, Prod.edist_eq, ENNReal.max_mul]
    exact max_le_max h‚ÇÅ h‚ÇÇ

protected theorem prod_mk_left (a : X) : LocallyLipschitz (Prod.mk a : Y ‚Üí X √ó Y) :=
  LocallyLipschitz.of_Lipschitz (LipschitzWith.prod_mk_left a)

protected theorem prod_mk_right (b : Y) : LocallyLipschitz (fun a : X => (a, b)) :=
  LocallyLipschitz.of_Lipschitz (LipschitzWith.prod_mk_right b)
end LocallyLipschitz
end EMetric

section Metric
variable [MetricSpace X] [MetricSpace Y] [MetricSpace Z]
namespace LocallyLipschitz
/-- `toSubset` is compatible with the neighbourhood filter. -/
protected lemma ToSubset.compatible_with_nhds (s t : Set X) {x : s} (ht : t ‚àà ùìù ‚Üëx) : toSubset t s ‚àà ùìù x := by sorry

/-- `toSubset` is compatible with the "neighbourhood within" filter. -/
protected lemma ToSubset.compatible_with_nhds_within (t U: Set X) {x : U} (hU : IsOpen U) (ht : t ‚àà ùìù[U] ‚Üëx) :
    toSubset t U ‚àà ùìù x := by
  have : t ‚à© U ‚àà ùìù ‚Üëx := by
    -- ùìù[U] ‚Üëx is the "neighbourhood within" filter, consisting of all sets t ‚äá U ‚à© b
    -- for some neighbourhood b of x. Choose an open subset a ‚äÜ b,
    -- then a ‚à© U is an open subset contained in t.
    rcases ht with ‚ü®b, hb, U', hU', htaU‚ü©
    rw [mem_nhds_iff] at hb
    rcases hb with ‚ü®a, ha, haopen, hxa‚ü©
    rw [mem_nhds_iff]
    use a ‚à© U
    constructor
    ¬∑ calc a ‚à© U
        _ ‚äÜ b ‚à© U := inter_subset_inter_left U ha
        _ = b ‚à© (U' ‚à© U) := by congr; rw [(Iff.mpr inter_eq_right_iff_subset hU')]
        _ ‚äÜ (b ‚à© U') ‚à© U := by rw [inter_assoc]
        _ = t ‚à© U := by rw [htaU]
    ¬∑ exact ‚ü®IsOpen.inter haopen hU, ‚ü®hxa, Subtype.mem x‚ü©‚ü©
  apply ToSubset.compatible_with_nhds
  exact Filter.mem_of_superset this (inter_subset_left t U)

/- Restrictions of Lipschitz functions is compatible with taking subtypes. -/
protected lemma LipschitzOnWith.restrict_subtype {f : X ‚Üí Y} {K : ‚Ñù‚â•0} (s t : Set X)
    (hf : LipschitzOnWith K f t) : LipschitzOnWith K (restrict s f) (toSubset t s) :=
  fun _ hx _ hy ‚Ü¶ hf hx hy

/-- Restrictions of locally Lipschitz functions are locally Lipschitz. -/
protected lemma restrict {f : X ‚Üí Y} (hf : LocallyLipschitz f) (s : Set X) :
    LocallyLipschitz (s.restrict f) := by
  intro x
  rcases hf x with ‚ü®K, t, ht, hfL‚ü©
  -- Consider t' := t ‚à© s as a neighbourhood of x *in s*.
  use K, toSubset t s
  exact ‚ü®ToSubset.compatible_with_nhds s t ht, LipschitzOnWith.restrict_subtype s t hfL‚ü©

/-- C¬π functions are locally Lipschitz. -/
-- TODO: move to ContDiff.lean!
protected lemma of_C1 {E F: Type*} {f : E ‚Üí F} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
    [NormedAddCommGroup F] [NormedSpace ‚Ñù F] (hf : ContDiff ‚Ñù 1 f) : LocallyLipschitz f := by
  intro x
  rcases (ContDiffAt.exists_lipschitzOnWith (ContDiff.contDiffAt hf)) with ‚ü®K, t, ht, hf‚ü©
  use K, t

/-- If `f` is C¬π on an open convex set `U`, the restriction of `f` to `U` is locally Lipschitz. -/
-- TODO: move to ContDiffOn.lean!
lemma of_C1_on_open {E F: Type*} {f : E ‚Üí F} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
    [NormedAddCommGroup F] [NormedSpace ‚Ñù F] {U : Set E} (h‚ÇÅU : IsOpen U) (h‚ÇÇU : Convex ‚Ñù U)
    (hf : ContDiffOn ‚Ñù 1 f U) : LocallyLipschitz (U.restrict f) := by
  intro x
  have : ContDiffWithinAt ‚Ñù 1 f U x := ContDiffOn.contDiffWithinAt hf (Subtype.mem x)
  let h := ContDiffWithinAt.exists_lipschitzOnWith this
  rcases (h h‚ÇÇU) with ‚ü®K, t, ht, hf‚ü©
  -- `t` is a neighbourhood of x "within U", i.e. contains the intersection of U with some nbhd a of x.
  -- Intersect with `U` to obtain a neighbourhood contained in `U`.
  use K, toSubset t U
  exact ‚ü®ToSubset.compatible_with_nhds_within t U h‚ÇÅU ht, LipschitzOnWith.restrict_subtype U t hf‚ü©
end LocallyLipschitz
end Metric

section EMetric
namespace LocallyLipschitz
variable [EMetricSpace X] [EMetricSpace Y] [EMetricSpace Z]
/-- The minimum of locally Lipschitz functions is locally Lipschitz. -/
protected lemma min {f g : X ‚Üí ‚Ñù} (hf : LocallyLipschitz f) (hg : LocallyLipschitz g) :
    LocallyLipschitz (fun x => min (f x) (g x)) := by
  let m : ‚Ñù √ó ‚Ñù ‚Üí ‚Ñù := fun p ‚Ü¶ min p.1 p.2
  have h : LocallyLipschitz m := LocallyLipschitz.of_Lipschitz lipschitzWith_min
  exact LocallyLipschitz.comp h (LocallyLipschitz.prod hf hg)

/-- The maximum of locally Lipschitz functions is locally Lipschitz. -/
protected lemma max {f g : X ‚Üí ‚Ñù} (hf : LocallyLipschitz f) (hg : LocallyLipschitz g) :
    LocallyLipschitz (fun x => max (f x) (g x)) := by
  let m : ‚Ñù √ó ‚Ñù ‚Üí ‚Ñù := fun p ‚Ü¶ max p.1 p.2
  have h : LocallyLipschitz m := LocallyLipschitz.of_Lipschitz lipschitzWith_max
  exact LocallyLipschitz.comp h (LocallyLipschitz.prod hf hg)

/-- The sum of locally Lipschitz functions is locally Lipschitz. -/
protected lemma sum {f g : X ‚Üí Y} [NormedAddCommGroup Y] [NormedSpace ‚Ñù Y]
    (hf : LocallyLipschitz f) (hg : LocallyLipschitz g) : LocallyLipschitz (f + g) := by
  intro x
  rcases hf x with ‚ü®Kf, t‚ÇÅ, h‚ÇÅt, hfL‚ü©
  rcases hg x with ‚ü®Kg, t‚ÇÇ, h‚ÇÇt, hgL‚ü©
  use Kf + Kg, t‚ÇÅ ‚à© t‚ÇÇ
  have hf' : LipschitzOnWith Kf f (t‚ÇÅ ‚à© t‚ÇÇ) := LipschitzOnWith.mono hfL (Set.inter_subset_left t‚ÇÅ t‚ÇÇ)
  have hg' : LipschitzOnWith Kg g (t‚ÇÅ ‚à© t‚ÇÇ) := LipschitzOnWith.mono hgL (Set.inter_subset_right t‚ÇÅ t‚ÇÇ)
  constructor
  ¬∑ exact Filter.inter_mem h‚ÇÅt h‚ÇÇt
  ¬∑ intro y hy z hz
    -- FIXME. This can surely be golfed!
    simp only [Pi.add_apply, ENNReal.coe_add]
    calc edist (f y + g y) (f z + g z)
      _ ‚â§ edist (f y + g y) (g y + f z) + edist (g y + f z) (f z + g z) := by apply edist_triangle
      -- Y is normed, hence the distance is translation-invariant
      _ ‚â§ edist (f y) (f z) + edist (g y) (g z) := by sorry
      _ ‚â§ Kf * edist y z + Kg * edist y z := add_le_add (hf' hy hz) (hg' hy hz)
      _ = (Kf + Kg) * edist y z := by ring

/-- Multiplying a locally Lipschitz function by a constant remains locally Lipschitz. -/
protected lemma scalarProduct {f : X ‚Üí Y} [NormedAddCommGroup Y] [NormedSpace ‚Ñù Y]
    (hf : LocallyLipschitz f) {a : ‚Ñù‚â•0} : LocallyLipschitz (fun x ‚Ü¶ a ‚Ä¢ f x) := by
  -- FIXME: allow any a, take the absolute value
  intro x
  rcases hf x with ‚ü®Kf, t, ht, hfL‚ü©
  use a * Kf, t
  constructor
  ¬∑ exact ht
  ¬∑ intro x hx y hy
    calc edist (a ‚Ä¢ f x) (a ‚Ä¢ f y)
      _ = a * edist (f x) (f y) := by sorry -- norm is multiplicative
      _ ‚â§ a * Kf * edist x y := by sorry -- use hfL
      _ ‚â§ ‚Üë(a * Kf) * edist x y := by sorry --exact?
end LocallyLipschitz
end EMetric
