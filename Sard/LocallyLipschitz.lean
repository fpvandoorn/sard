import Mathlib.Analysis.Calculus.ContDiff
import Mathlib.Topology.MetricSpace.Lipschitz

/-!
## Locally Lipschitz functions
Define locally Lipschitz functions and show their elementary properties.
Show that C¬π functions are locally Lipschitz.
-/
-- FIXME: move to a separate section of Lipschitz

open Topology
set_option autoImplicit false

variable {X Y Z: Type*} [MetricSpace X] [MetricSpace Y] [MetricSpace Z]

-- f : X ‚Üí Y is locally Lipschitz iff every point `p ‚àà X` has a neighourhood on which `f` is Lipschitz.
def LocallyLipschitz (f : X ‚Üí Y) : Prop :=
  ‚àÄ x : X, ‚àÉ K, ‚àÉ t ‚àà ùìù x, LipschitzOnWith K f t

/-- A Lipschitz function is locally Lipschitz. -/
lemma Lipschitz_is_locally_Lipschitz {f : X ‚Üí Y} (hf : ‚àÉ K, LipschitzWith K f) :
    LocallyLipschitz f := by sorry

/-- The identity function is locally Lipschitz. -/
lemma LocallyLipschitz_id : LocallyLipschitz (@id X) := by
  sorry-- refine Lipschitz_is_locally_Lipschitz ?_
  -- exact LipschitzWith.id

/-- The composition of locally Lipschitz functions is locally Lipschitz. --/
lemma LocallyLipschitz_comp {f : X ‚Üí Y} {g : Y ‚Üí Z}
    (hf : LocallyLipschitz f) (hg : LocallyLipschitz g) : LocallyLipschitz (g ‚àò f) := by sorry

/-- The sum of locally Lipschitz functions is locally Lipschitz. -/
lemma LocallyLipschitz_sum {f g : X ‚Üí Y} [NormedAddCommGroup Y] [NormedSpace ‚Ñù Y]
    (hf : LocallyLipschitz f) (hg : LocallyLipschitz g) : LocallyLipschitz (f + g) := by
  intro x
  rcases hf x with ‚ü®K‚ÇÅ, t‚ÇÅ, h‚ÇÅt, hfL‚ü©
  rcases hg x with ‚ü®K‚ÇÇ, t‚ÇÇ, h‚ÇÇt, hgL‚ü©
  use K‚ÇÅ + K‚ÇÇ
  use t‚ÇÅ ‚à© t‚ÇÇ
  have as: LipschitzOnWith K‚ÇÅ f (t‚ÇÅ‚à©t‚ÇÇ) := by exact LipschitzOnWith.mono (by exact hfL) (by exact Set.inter_subset_left t‚ÇÅ t‚ÇÇ)
  have bs: LipschitzOnWith K‚ÇÇ g (t‚ÇÅ‚à©t‚ÇÇ) := sorry --by exact LipschitzOnWith.mono (by exact hfL) (by exact Set.inter_subset_left t‚ÇÅ t‚ÇÇ)
  constructor
  ¬∑ exact Filter.inter_mem h‚ÇÅt h‚ÇÇt
  ¬∑ sorry -- exact?


/-- The minimum of locally Lipschitz functions is locally Lipschitz. -/
lemma LocallyLipschitz_min {f g : X ‚Üí ‚Ñù} (hf : LocallyLipschitz f) (hg : LocallyLipschitz g) :
    LocallyLipschitz (fun x => min (f x) (g x)) := by
  intro x
  rcases hf x with ‚ü®Kf, t‚ÇÅ, h‚ÇÅt, hfL‚ü©
  rcases hg x with ‚ü®Kg, t‚ÇÇ, h‚ÇÇt, hgL‚ü©
  use max Kf Kg
  use t‚ÇÅ ‚à© t‚ÇÇ

/-- The maximum of locally Lipschitz functions is locally Lipschitz. -/
lemma LocallyLipschitz_max {f g : X ‚Üí ‚Ñù} (hf : LocallyLipschitz f) (hg : LocallyLipschitz g) :
    LocallyLipschitz (fun x => max (f x) (g x)) := by sorry

/-- Multiplying a locally Lipschitz function by a constant remains locally Lipschitz. -/
lemma LocallyLipschitz_scalarProduct {f : X ‚Üí Y} [NormedAddCommGroup Y] [NormedSpace ‚Ñù Y] (hf : LocallyLipschitz f) {a : ‚Ñù} :
    LocallyLipschitz (fun x ‚Ü¶ a ‚Ä¢ f x) := by sorry

variable {E F: Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

/-- C¬π functions are locally Lipschitz. -/
lemma LocallyLipschitz_sdfdsf {f : E ‚Üí E} (hf : ContDiff ‚Ñù 1 f) : LocallyLipschitz f := by sorry


-- example: f : ‚Ñù ‚Üí ‚Ñù, x ‚Ü¶ x^2 is locally Lipschitz (but not Lipschitz)