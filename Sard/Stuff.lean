import Sard.MeasureZero
import Mathlib.Analysis.Calculus.ContDiff
import Mathlib.Geometry.Manifold.ChartedSpace
import Mathlib.Geometry.Manifold.MFDeriv
import Mathlib.MeasureTheory.Measure.Hausdorff
import Mathlib.Topology.Bases
import Mathlib.Topology.Basic
import Mathlib.Topology.MetricSpace.Lipschitz

open FiniteDimensional Function Manifold MeasureTheory Measure Set TopologicalSpace Topology
set_option autoImplicit false

variable
  -- declare a smooth manifold `M` over the pair `(E, H)`.
  {E : Type*}
  [NormedAddCommGroup E] [NormedSpace ‚Ñù E] {H : Type*} [TopologicalSpace H]
  (I : ModelWithCorners ‚Ñù E H) {M : Type*} [TopologicalSpace M] [ChartedSpace H M] -- I.Boundaryless?
  [SmoothManifoldWithCorners I M] [FiniteDimensional ‚Ñù E]
  -- declare a smooth manifold `N` over the pair `(F, G)`.
  {F : Type*}
  [NormedAddCommGroup F] [NormedSpace ‚Ñù F] {G : Type*} [TopologicalSpace G]
  (J : ModelWithCorners ‚Ñù F G) {N : Type*} [TopologicalSpace N] [ChartedSpace G N] [J.Boundaryless]
  [SmoothManifoldWithCorners J N] [FiniteDimensional ‚Ñù F]
  [MeasurableSpace F] [BorelSpace F]

section ImageMeasureZeroSet
/-- If $$f : X ‚Üí Y$$ is a Lipschitz map between metric spaces, then `f` maps null sets
to null sets, w.r.t. the `d`-dimensional Hausdorff measure (for $$d ‚àà ‚Ñï$$) on `X` resp. `Y`. -/
-- this is just an auxiliary lemma -> perhaps inline later
lemma lipschitz_image_null_set_is_null_set
    { X Y : Type } [MetricSpace X] [MeasurableSpace X] [BorelSpace X]
    [MetricSpace Y] [MeasurableSpace Y] [BorelSpace Y]
    { f : X ‚Üí Y } (hf : ‚àÉ K : NNReal, LipschitzWith K f)
    { d : ‚Ñù } (hd : d ‚â• 0) { s : Set X } (hs : ŒºH[d] s = 0) : ŒºH[d] (f '' s) = 0 := by
  obtain ‚ü®K, hk‚ü© := hf
  have aux : ŒºH[d] (f '' s) ‚â§ (K : ENNReal) ^ d * ŒºH[d] s :=
    LipschitzOnWith.hausdorffMeasure_image_le (LipschitzWith.lipschitzOnWith hk s) hd
  rw [hs] at aux
  simp_all only [ge_iff_le, mul_zero, nonpos_iff_eq_zero, le_refl, hs]

/-- Consider metric spaces `X` and `Y` with the `d`-dimensional Hausdorff measure.
If `X` is $œÉ$-compact, a locally Lipschitz map $f : X ‚Üí Y$
maps null sets in `X` to null sets in `Y`. -/
lemma locally_lipschitz_image_of_null_set_is_null_set { X Y : Type }
    [MetricSpace X] [MeasurableSpace X] [BorelSpace X] [SigmaCompactSpace X]
    [MetricSpace Y] [MeasurableSpace Y] [BorelSpace Y] { d : ‚Ñï }
    { f : X ‚Üí Y } (hf : ‚àÄ x : X, ‚àÉ K : NNReal, ‚àÉ U : Set X, IsOpen U ‚àß LipschitzOnWith K f U)
    { s : Set X } (hs : ŒºH[d] s = 0) : ŒºH[d] (f '' s) = 0 := by
  -- Choose a countable cover of X by compact sets K_n.
  let K : ‚Ñï ‚Üí Set X := compactCovering X
  have hcov : ‚ãÉ (n : ‚Ñï), K n = univ := iUnion_compactCovering X
  have hcompact : ‚àÄ n : ‚Ñï, IsCompact (K n) := isCompact_compactCovering X

  -- By countable subadditivity, it suffices to show the claim for each K_n.
  suffices ass : ‚àÄ n : ‚Ñï, ŒºH[d] (f '' (s ‚à© K n)) = 0 by
    have : s = ‚ãÉ (n : ‚Ñï), s ‚à© K n := by
      calc s
        _ = s ‚à© univ := by exact Eq.symm (inter_univ s)
        _ = s ‚à© ‚ãÉ (n : ‚Ñï), K n := by rw [hcov]
        _ = ‚ãÉ (n : ‚Ñï), s ‚à© K n := by apply inter_iUnion s
    have hless : ŒºH[d] (f '' s) ‚â§ 0 := by
      calc ŒºH[d] (f '' s)
        _ = ŒºH[d] (f '' (‚ãÉ (n : ‚Ñï), s ‚à© K n)) := by rw [‚Üê this]
        _ = ŒºH[d] (‚ãÉ (n : ‚Ñï), f '' (s ‚à© K n)) := by rw [@image_iUnion]
        _ ‚â§ ‚àë' (n : ‚Ñï), ŒºH[d] (f '' (s ‚à© K n)) := by apply OuterMeasure.iUnion_nat
        _ = ‚àë' (n : ‚Ñï), 0 := by simp_rw [ass]
        _ = 0 := by rw [@tsum_zero]
    have : 0 ‚â§ ŒºH[d] (f '' s) ‚àß ŒºH[d] (f '' s) ‚â§ 0 ‚Üí ŒºH[d] (f '' s) = 0 := by
      simp only [zero_le, nonpos_iff_eq_zero, true_and]
      rw [‚Üê hs]
      simp only [imp_self]
    apply this
    exact ‚ü®(by simp only [ge_iff_le, zero_le]), hless‚ü©

  intro n
  -- Consider the open cover (U_x) of K_n induced by hf: each U_x is an open subset containing x
  -- on which f is Lipschitz, say with constant K_x.
  let U : K n ‚Üí Set X := by
    intro x
    have hyp := hf x -- there exist K U, s.t. U is open and f is K-Lipschitz on U
    -- FIXME: make this step work: rcases hyp with ‚ü®KU, hKU‚ü©
    sorry
  have hcovering : K n ‚äÜ ‚ãÉ (x : (K n)), U x := sorry -- since x ‚àà U_x
  have hopen : ‚àÄ x : (K n), IsOpen (U x) := sorry -- almost vacuously true
  have hLipschitz : ‚àÄ x : (K n), ‚àÉ K, LipschitzOnWith K f (U x) := by sorry -- by construction

  -- Since K_n is compact, (U_x) has a finite subcover U_1, ..., U_l.
  let subcover := IsCompact.elim_finite_subcover (hcompact n) U hopen hcovering
  rcases subcover with ‚ü®t, ht‚ü©
  -- On each U_j, f is Lipschitz by hypothesis.
  have : ‚àÄ i : t, ‚àÉ K : NNReal, LipschitzOnWith K f (U i) := by sorry
  -- Hence, the previous lemma `lipschitz_image_null_set_is_null_set` applies.
  sorry
end ImageMeasureZeroSet

variable {m n r : ‚Ñï} (hm : finrank ‚Ñù E = m) (hn : finrank ‚Ñù F = n) (hr : r > m-n)
variable {J}

/-- Let $U ‚äÜ ‚Ñù^n$ be an open set and f : U ‚Üí ‚Ñù^n be a C^1 map.
  If $X\subset U$ has measure zero, so has $f(X)$.
  Note: this is false for merely C‚Å∞ maps, the Cantor function $f$ provides a counterexample:
  the standard Cantor set has measure zero, but its image has measure one
  (as the complement $$[0,1]\setminus C$$ has countable image by definition of $f$). -/
lemma C1_image_null_set_null {f : E ‚Üí F} {U : Set E} (hU : IsOpen U) (hf : ContDiffOn ‚Ñù 1 f U)
    [MeasurableSpace E] [BorelSpace E] (Œº : Measure E) [IsAddHaarMeasure Œº]
    [MeasurableSpace F] [BorelSpace F] (ŒΩ : Measure F) [IsAddHaarMeasure ŒΩ]
    (hd : m = n) {s : Set E} (h‚ÇÅs: s ‚äÜ U) (h‚ÇÇs: Œº s = 0) : ŒΩ (f '' s) = 0 := by
  -- The m-dimensional Hausdorff measure on E resp. F agrees with the Lebesgue measure.
  have h‚ÇÅ : Œº = ŒºH[m] := by
    -- The m-dimensional Hausdorff measure is the Lebesgue measure on R^m.
    have aux : ŒºH[m] = (volume : Measure (Fin m ‚Üí ‚Ñù)) := by sorry -- apply hausdorffMeasure_pi_real
    -- The Lebesgue measure is the Haar measure on R^m.
    -- xxx: doesn't typecheck yet, need a measurable equivalence between E and R^m
    -- have : Œº = (volume : Measure (Fin m ‚Üí ‚Ñù)) := by sorry -- MeasureTheory.addHaarMeasure_eq_volume_pi
    -- TODO: combining these doesn't work yet
    sorry
  have h‚ÇÇ : ŒΩ = ŒºH[n] := by sorry -- same argument like for Œº
  -- Since f is C¬π, it's locally Lipschitz and we can apply the previous lemma.
  have : ŒºH[m] (f '' s) = 0 := by
    -- f is locally Lipschitz (xxx: introduce a predicate for this?)
    have hf' : ‚àÄ x : E, ‚àÉ K : NNReal, ‚àÉ U : Set E, IsOpen U ‚àß LipschitzOnWith K f U := by
      intro x
      have : ‚àÉ K, ‚àÉ t ‚àà ùìù x, LipschitzOnWith K f t := by
        sorry -- somehow, apply ContDiffAt.exists_lipschitzOnWith
      rcases this with ‚ü®K, ‚ü®t, ‚ü®ht, hfloc‚ü©‚ü©‚ü©
      rw [mem_nhds_iff] at ht
      rcases ht with ‚ü®U, ‚ü®hUt, hU, hxU‚ü©‚ü©
      have : LipschitzOnWith K f U := LipschitzOnWith.mono hfloc hUt
      use K
      use U
    -- TODO: doesn't work, for reasons I don't understand
    -- apply locally_lipschitz_image_of_null_set_is_null_set hf' (X := E) (d := m) hs
    sorry
  rw [h‚ÇÇ, ‚Üê hd]
  exact this

/-- If $U ‚äÜ ‚Ñù^m$ is open and f : U ‚Üí ‚Ñù^n is a C^1 map with `m < n`, then $f(U)$ has measure zero. -/
lemma image_C1_dimension_increase_null_local {g : E ‚Üí F} {U : Set E} (hU : IsOpen U)
    [MeasurableSpace E] [BorelSpace E] (Œº : Measure E) [IsAddHaarMeasure Œº]
    [MeasurableSpace F] [BorelSpace F] (ŒΩ : Measure F) [IsAddHaarMeasure ŒΩ]
    (hg : ContDiffOn ‚Ñù 1 g U) (hmn : m < n) : ŒΩ (g '' U) = 0 := by
  -- Since n > m, g factors through the projection R^n ‚Üí R^m.
  -- We consider the commutative diagram
  --      E ------------------ g --------> F
  --      |                                ^
  --      | incl                           | pi
  --      |                                |
  --      E √ó ‚Ñù^{n-m}     ---- g' -->   F √ó ‚Ñù^{n-m}
  -- More precisely: consider the function g' also mapping to the extra factor.
  let incl : E ‚Üí E √ó (Fin (n-m) ‚Üí ‚Ñù) := fun x ‚Ü¶ ‚ü®x, 0‚ü©
  let g' : E √ó (Fin (n-m) ‚Üí ‚Ñù) ‚Üí F √ó (Fin (n-m) ‚Üí ‚Ñù) := fun ‚ü®y, _‚ü© ‚Ü¶ ‚ü®g y, 0‚ü©
  let pi : F √ó (Fin (n-m) ‚Üí ‚Ñù) ‚Üí F := fun ‚ü®f, _‚ü© ‚Ü¶ f
  have commutes: pi ‚àò g' ‚àò incl = g := by -- can I golf this to one line?
     ext y
     rw [comp_apply, comp_apply]
  -- Now, incl(U)=U √ó 0 has measure zero in E √ó ‚Ñù^{n-m}.
  -- Choose a Haar measure on E √ó ‚Ñù^{n-m}, so we can speak about the measure of U √ó {0},
  obtain ‚ü®K''‚ü© : Nonempty (PositiveCompacts (E √ó (Fin (n-m) ‚Üí ‚Ñù))) := PositiveCompacts.nonempty'
  let Œº' : Measure (E √ó (Fin (n-m) ‚Üí ‚Ñù)) := addHaarMeasure K''
  have hisHaar: IsAddHaarMeasure Œº' := isAddHaarMeasure_addHaarMeasure K''
  -- U √ó 0 has measure zero in E √ó ‚Ñù^{n-m}: need to pass to product measures.
  have aux : Œº' (incl '' U) = 0 := by sorry
  -- Hence so does its image pi ‚àò g' ‚àò incl (U) = g '' U.
  have : ŒΩ ((pi ‚àò g' ‚àò incl) '' U) = 0 := by
    -- XXX: statement doesn't typecheck yet. have : ContDiffOn ‚Ñù 1 (pi ‚àò g') (U √ó (Fin (n-m) ‚Üí ‚Ñù)) := sorry
    -- apply C1_image_null_set_null, XXX doesn't apply yet
    sorry
  rw [‚Üê commutes]
  exact this

/-- If M, N are C¬π manifolds with dim M < dim N and f:M ‚Üí N is C¬π, then f(M) has measure zero. -/
-- XXX: why am I proving this? is this result useful anyway?
-- because I think the same argument is used for Sard's theorem locally...
lemma image_C1_dimension_increase_image_measure_zero {f : M ‚Üí N} (hf : ContMDiff I J r f)
    [SecondCountableTopology M]
    (hdim : m < n) : MeasureZero J (Set.range f) := by
  -- It suffices to show that the image of each chart domain has measure zero.
  suffices ‚àÄ e ‚àà atlas H M, MeasureZero J (f '' (e.source)) by
    let s : Set M := univ -- so we can generalise later
    -- The charts of M form an open cover.
    let U : M ‚Üí Set M := fun x ‚Ü¶ (ChartedSpace.chartAt x : LocalHomeomorph M H).source
    have hcovering : univ ‚äÜ ‚ãÉ (x : M), U x := by -- XXX: can golf this??
      intro x
      have : x ‚àà U x := mem_chart_source H x
      rw [@mem_iUnion]
      intro _
      use x
    have hopen : ‚àÄ x : M, IsOpen (U x) := fun x => (ChartedSpace.chartAt x).open_source
    -- since M is second countable, it is Lindel√∂f: there is a countable subcover U_n of M.
    let subcover := TopologicalSpace.isOpen_iUnion_countable U hopen
    rcases subcover with ‚ü®T, ‚ü®hTCountable, hTcover‚ü©‚ü©
    -- Each f(U_n ‚à© S) has measure zero by hypothesis, we have f '' S = ‚à™ f (U_n ‚à© S).
    have : ‚àÄ i : T, MeasureZero J (f '' ((U i) ‚à© s)) := by
      intro i
      simp_all only [chart_mem_atlas, ge_iff_le, gt_iff_lt, inter_univ]
    -- The countable union of measure zero sets has measure zero.
    have decomp : ‚ãÉ (i : T), f '' ((U i) ‚à© s) = range f := by sorry
      -- calc
      --   range f
      --   _ = f '' univ := by sorry
      --   _ = f '' (‚ãÉ (x : M), U x) := by sorry
      --   _ = f '' (‚ãÉ (i : M) (_ : i ‚àà T), U i) := by sorry
      --   --_ = f '' (‚ãÉ (i : T), T i) := by sorry
      --simp only [inter_univ, iUnion_coe_set]
    rw [‚Üê decomp]
    have todo : Encodable T := by sorry --infer_instance
    apply @MeasureZero.iUnion (Œπ := T)
    exact this

  -- Fix a chart; we want to show f(U ‚à© M) has measure zero.
  intro e he
  rw [MeasureZero]
  intro Œº hŒº e' he'
  have aux : J ‚àò e' '' (e'.source ‚à© f '' e.source) = (J ‚àò e' ‚àò f) '' e.source := by sorry
  rw [aux]
  -- Consider the function g : U ‚Üí ‚Ñù^m. Defined on all of E (taking junk values outside of the chart).
  let g : E ‚Üí F := J ‚àò e' ‚àò f ‚àò e.invFun ‚àò I.invFun
  have : (J ‚àò ‚Üëe' ‚àò f '' e.source) = g '' (I '' e.target) := by sorry
  -- g is C¬π: argue that everything is on the chart domains, then by definition
  have gdiff : ContDiffOn ‚Ñù 1 g (I '' e.target) := by sorry
  rw [this]
  -- this is basically image_C1_dimension_increase_null_local
  -- applied to g, with hypotheses gdiff hdim, measure Œº... doesn't typecheck yet
  sorry

/-- Local version of Sard's theorem. If $W ‚äÜ ‚Ñù^m$ is open and $f: W ‚Üí ‚Ñù^n$ is $C^r$,
the set of critical values has measure zero. -/
theorem sard_local {s w : Set E} {f : E ‚Üí F} (hf : ContDiffOn ‚Ñù r f w)
    {f' : E ‚Üí E ‚ÜíL[‚Ñù] F} (hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x)
    (h'f' : ‚àÄ x ‚àà s, ¬¨ Surjective (f' x)) (Œº : Measure F) [IsAddHaarMeasure Œº] :
    Œº (f '' s) = 0 := by
  by_cases hyp: m < n
  ¬∑ sorry -- show f(W) has measure zero; use `image_C1_dimension_increase_null_local`
  ¬∑ sorry

/-- **Sard's theorem**. Let $M$ and $N$ be real $C^r$ manifolds of dimensions
$m$ and $n$, and $f:M‚ÜíN$ a $C^r$ map. If $r>\max{0, m-n}$,
the set of regular values of $f$ has full measure.

Note that mathlib already contains a weaker version of Sard's theorem,
as `addHaar_image_eq_zero_of_det_fderivWithin_eq_zero` in the file `Mathlib.MeasureTheory.Function.Jacobian.Manifold`.
This local result implies the case $m=n$ for $r\geq 1$ (not hard to show).
However, note that the case $m > n$ requires a different proof: for $m>n$, the condition
$f\in C^1$ is not sufficient any more: Whitney (1957) constructed a C¬π function
$$f : ‚Ñù¬≤ ‚Üí ‚Ñù$$ whose set of critical values contains an open set, thus has positive measure. -/
theorem sard {f : M ‚Üí N} (hf : ContMDiff I J r f)
    {f' : ‚àÄx, TangentSpace I x ‚ÜíL[‚Ñù] TangentSpace J (f x)} {s : Set M}
    (hf' : ‚àÄ x ‚àà s, HasMFDerivWithinAt I J f s x (f' x))
    (h'f' : ‚àÄ x ‚àà s, ¬¨ Surjective (f' x)) : MeasureZero J (f '' s) := by
  -- It suffices to show that the image of each chart domain has measure zero.
  suffices ‚àÄ e ‚àà atlas H M, MeasureZero J (f '' (e.source)) by
    intro Œº hŒº e he
    -- should be a standard open cover argument: Lindel√∂f, countable unions etc.
    -- same as for image_C1_dimension_increase_image_measure_zero
    sorry
  sorry-- apply sard_local

-- Corollary. The set of regular values is residual and therefore dense.
-- note: `ContDiffOn.dense_compl_image_of_dimH_lt_finrank` looks related, I want a version on manifolds
